{"version":3,"file":"js/ai.f4529be0.js","mappings":"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","sources":["webpack://free-design-system/./src/views/ai/AIView.vue","webpack://free-design-system/./src/components/AI/VAI.vue","webpack://free-design-system/src/components/AI/VAI.vue","webpack://free-design-system/./src/components/AI/VAI.vue?9d8f","webpack://free-design-system/./src/components/AI/VAI.vue?367a","webpack://free-design-system/src/views/ai/AIView.vue","webpack://free-design-system/./src/views/ai/AIView.vue?f9e2","webpack://free-design-system/./src/views/ai/AIView.vue?14c6"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('v-ai',{attrs:{\"width\":350,\"height\":450,\"particles\":500}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('canvas',{ref:\"canvasAI\",style:(`width: ${_vm.width}px; height=${_vm.height}px; border: 1px solid #42a5f0`),attrs:{\"width\":_vm.width,\"height\":_vm.height},on:{\"click\":_vm.clickCell}}),_c('br'),_c('p',[_vm._v(\"Alive: \"+_vm._s(_vm.alive)+\" / Born: \"+_vm._s(_vm.born))]),_c('p',[_vm._v(\"Total collisions: \"+_vm._s(_vm.collisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy collisions: \"+_vm._s(_vm.heavyCollisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy percent: \"+_vm._s(_vm.heavyPercent))]),_c('p',[_vm._v(\"Most heavy: \"+_vm._s(_vm.mostHeavy.toFixed(3)))])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <canvas\n      ref=\"canvasAI\"\n      :width=\"width\"\n      :height=\"height\"\n      :style=\"`width: ${width}px; height=${height}px; border: 1px solid #42a5f0`\"\n      @click=\"clickCell\"\n    ></canvas>\n    <br />\n    <p>Alive: {{ alive }} / Born: {{ born }}</p>\n    <p>Total collisions: {{ collisions.toLocaleString() }}</p>\n    <p>Heavy collisions: {{ heavyCollisions.toLocaleString() }}</p>\n    <p>Heavy percent: {{ heavyPercent }}</p>\n    <p>Most heavy: {{ mostHeavy.toFixed(3) }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 100,\n    },\n    height: {\n      type: Number,\n      default: 100,\n    },\n    particles: {\n      type: Number,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      ctx: null,\n      cellWidth: this.width / 10,\n      cellHeight: this.height / 10,\n      radius: this.width / 20,\n      fps: 60,\n      timer: null,\n      cells: [],\n      collisions: 0,\n      heavyCollisions: 0,\n      mostHeavy: 0,\n      maxMass: 10,\n      newId: 0,\n      born: 0,\n    };\n  },\n  methods: {\n    distance(x1, y1, x2, y2) {\n      const xDist = x2 - x1;\n      const yDist = y2 - y1;\n\n      return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n    },\n    rotate(velocity, angle) {\n      const rotatedVelocities = {\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),\n      };\n\n      return rotatedVelocities;\n    },\n    resolveCollision(particle, otherParticle) {\n      this.collisions += 1;\n      const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n      const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n      const xDist = otherParticle.x - particle.x;\n      const yDist = otherParticle.y - particle.y;\n\n      // Prevent accidental overlap of particles\n      if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n        // Grab angle between the two colliding particles\n        const angle = -Math.atan2(\n          otherParticle.y - particle.y,\n          otherParticle.x - particle.x\n        );\n\n        // Store mass in var for better readability in collision equation\n        const m1 = particle.mass;\n        const m2 = otherParticle.mass;\n\n        // Velocity before equation\n        const u1 = this.rotate(particle.velocity, angle);\n        const u2 = this.rotate(otherParticle.velocity, angle);\n\n        // Velocity after 1d collision equation\n        const v1 = {\n          x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),\n          y: u1.y,\n        };\n        const v2 = {\n          x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),\n          y: u2.y,\n        };\n\n        // Final velocity after rotating axis back to original location\n        const vFinal1 = this.rotate(v1, -angle);\n        const vFinal2 = this.rotate(v2, -angle);\n\n        if (\n          otherParticle.mass < particle.mass &&\n          Math.sqrt(\n            Math.pow(otherParticle.velocity.x, 2) +\n              Math.pow(otherParticle.velocity.y, 2)\n          ) <\n            Math.sqrt(\n              Math.pow(particle.velocity.x, 2) +\n                Math.pow(particle.velocity.y, 2)\n            )\n        ) {\n          otherParticle.mass -=\n            otherParticle.mass > 0.03 ? otherParticle.mass / 10 : 0;\n          particle.mass +=\n            particle.mass < this.maxMass ? otherParticle.mass / 20 : 0;\n\n          if (vFinal2.x < 0) vFinal2.x -= (1 / otherParticle.mass) * 2;\n          if (vFinal2.x > 0) vFinal2.x += (1 / otherParticle.mass) * 2;\n          if (vFinal2.y < 0) vFinal2.y -= (1 / otherParticle.mass) * 2;\n          if (vFinal2.y > 0) vFinal2.y += (1 / otherParticle.mass) * 2;\n\n          this.heavyCollisions += 1;\n        } else if (\n          otherParticle.mass > particle.mass &&\n          Math.sqrt(\n            Math.pow(otherParticle.velocity.x, 2) +\n              Math.pow(otherParticle.velocity.y, 2)\n          ) >\n            Math.sqrt(\n              Math.pow(particle.velocity.x, 2) +\n                Math.pow(particle.velocity.y, 2)\n            )\n        ) {\n          particle.mass -= particle.mass > 0.03 ? particle.mass / 10 : 0;\n          otherParticle.mass +=\n            otherParticle.mass < this.maxMass ? particle.mass / 20 : 0;\n          if (vFinal1.x < 0) vFinal1.x -= (1 / particle.mass) * 2;\n          if (vFinal1.x > 0) vFinal1.x += (1 / particle.mass) * 2;\n          if (vFinal1.y < 0) vFinal1.y -= (1 / particle.mass) * 2;\n          if (vFinal1.y > 0) vFinal1.y += (1 / particle.mass) * 2;\n\n          this.heavyCollisions += 1;\n          this.mostHeavy = Math.max(\n            Math.round(otherParticle.mass * 10000) / 10000,\n            this.mostHeavy\n          );\n        } else {\n          particle.mass -= particle.mass > 0.03 ? 0.01 : 0;\n          otherParticle.mass += otherParticle.mass < 3 ? 0.002 : 0;\n          particle.color = particle.mass < 1 ? \"red\" : particle.color;\n          otherParticle.color =\n            otherParticle.mass < 1 ? \"red\" : otherParticle.color;\n        }\n\n        // Swap particle velocities for realistic bounce effect\n        particle.velocity.x = vFinal1.x;\n        particle.velocity.y = vFinal1.y;\n\n        otherParticle.velocity.x = vFinal2.x;\n        otherParticle.velocity.y = vFinal2.y;\n\n        const heaviest = Math.max(particle.mass, otherParticle.mass);\n        this.mostHeavy = Math.max(\n          Math.round(heaviest * 10000) / 10000,\n          this.mostHeavy\n        );\n      }\n    },\n    fill({ x, y, color, radius }) {\n      if (radius < 0) {\n        return;\n      }\n      this.ctx.fillStyle = color;\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius, 0, 2 * radius * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    },\n\n    clickCell($event) {\n      const rect = this.$refs.canvasAI.getBoundingClientRect();\n      const canvasCoords = {\n        left: rect.left,\n        top: rect.top,\n      };\n      const mass = 1;\n      const radius = mass * 2;\n      const x = $event.x - canvasCoords.left;\n      const y = $event.y - canvasCoords.top;\n      const newCell = {\n        x,\n        y,\n        color: \"#888888\",\n        velocity: {\n          x: Math.random() * 10 - 5,\n          y: Math.random() * 10 - 5,\n        },\n        mass,\n        radius,\n      };\n\n      if (x < radius || x >= this.width - radius) {\n        return false;\n      }\n      if (y < radius || y >= this.height - radius) {\n        return false;\n      }\n\n      this.fill(newCell);\n      this.cells.push(newCell);\n    },\n    render() {\n      this.timer = setTimeout(() => {\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        for (let i = 0; i < this.cells.length; i++) {\n          for (let j = 0; j < this.cells.length; j++) {\n            const particleA = this.cells[i];\n            const particleB = this.cells[j];\n\n            if (particleA === particleB) {\n              continue;\n            }\n            if (\n              this.distance(\n                particleA.x,\n                particleA.y,\n                particleB.x,\n                particleB.y\n              ) <=\n              particleA.radius + particleB.radius\n            ) {\n              this.resolveCollision(particleA, particleB);\n\n              particleA.radius = particleA.mass * 2;\n              particleB.radius = particleB.mass * 2;\n            }\n          }\n        }\n\n        this.cells.forEach((cell) => {\n          const { x, y, velocity } = cell;\n          let newX = x + velocity.x;\n          let newY = y + velocity.y;\n\n          // hit left border\n          if (newX < cell.radius) {\n            newX = cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          //hit right border\n          if (newX >= this.width - cell.radius) {\n            newX = this.width - cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          // hit top border\n          if (newY < cell.radius) {\n            newY = cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          //hit bottom border\n          if (newY >= this.height - cell.radius) {\n            newY = this.height - cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          cell.x = newX;\n          cell.y = newY;\n          cell.velocity.x = cell.velocity.x > 3 ? 3 : cell.velocity.x;\n          cell.velocity.y = cell.velocity.y > 3 ? 3 : cell.velocity.y;\n\n          this.fill(cell);\n\n          if (cell.mass < 0.5) {\n            this.cells = this.cells.filter((item) => item !== cell);\n          }\n\n          if (cell.mass > 5) {\n            cell.mass /= 2;\n            cell.color = \"green\";\n            this.createNewCell(cell.mass, this.cells.length);\n            this.born += 1;\n            this.mostHeavy = Math.max(...this.cells.map((o) => o.mass));\n          }\n        });\n\n        window.requestAnimationFrame(this.render);\n      }, 1000 / this.fps);\n    },\n    randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    createNewCell(mass) {\n      this.newId += 1;\n\n      const radius = mass * 2;\n      let x = this.randomIntFromInterval(\n        this.cellWidth,\n        this.width - this.cellWidth\n      );\n      let y = this.randomIntFromInterval(\n        this.cellHeight,\n        this.height - this.cellHeight\n      );\n      const newCell = {\n        x,\n        y,\n        color: this.newId > this.particles ? \"blue\" : \"#888888\",\n        velocity: {\n          x: Math.random() * 2 - 1,\n          y: Math.random() * 2 - 1,\n        },\n        mass,\n        radius,\n        id: this.newId,\n      };\n\n      if (x < radius || x >= this.width - radius) {\n        return false;\n      }\n      if (y < radius || y >= this.height - radius) {\n        return false;\n      }\n\n      this.fill(newCell);\n      this.cells.push(newCell);\n\n      console.log(this.newId);\n    },\n    generateRandom(num) {\n      for (let i = 0; i < num; i++) {\n        this.createNewCell(2, i);\n      }\n    },\n  },\n  mounted() {\n    this.ctx = this.$refs.canvasAI.getContext(\"2d\");\n\n    this.generateRandom(this.particles);\n    this.render();\n  },\n  computed: {\n    alive() {\n      return this.cells.length;\n    },\n    heavyPercent() {\n      return Math.round((this.heavyCollisions / this.collisions) * 100) + \"%\";\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VAI.vue?vue&type=template&id=0a3258f9&scoped=true&\"\nimport script from \"./VAI.vue?vue&type=script&lang=js&\"\nexport * from \"./VAI.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0a3258f9\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div>\n    <v-ai :width=\"350\" :height=\"450\" :particles=\"500\" />\n  </div>\n</template>\n\n<script>\nimport VAi from \"@/components/AI/VAI\";\n\nexport default {\n  components: {\n    VAi,\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AIView.vue?vue&type=template&id=2b468eb3&scoped=true&\"\nimport script from \"./AIView.vue?vue&type=script&lang=js&\"\nexport * from \"./AIView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2b468eb3\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","ref","style","width","height","on","clickCell","_v","_s","alive","born","collisions","toLocaleString","heavyCollisions","heavyPercent","mostHeavy","toFixed","props","type","Number","default","particles","required","data","ctx","cellWidth","cellHeight","radius","fps","timer","cells","maxMass","newId","methods","distance","x1","y1","x2","y2","xDist","yDist","Math","sqrt","pow","rotate","velocity","angle","rotatedVelocities","x","cos","y","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","max","round","color","heaviest","fill","fillStyle","beginPath","arc","PI","closePath","$event","rect","$refs","canvasAI","getBoundingClientRect","canvasCoords","left","top","newCell","random","push","setTimeout","fillRect","i","length","j","particleA","particleB","forEach","cell","newX","newY","filter","item","createNewCell","map","o","window","requestAnimationFrame","randomIntFromInterval","min","floor","id","console","log","generateRandom","num","mounted","getContext","computed","component","components","VAi"],"sourceRoot":""}