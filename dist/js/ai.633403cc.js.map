{"version":3,"file":"js/ai.633403cc.js","mappings":"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","sources":["webpack://free-design-system/./src/views/ai/AIView.vue","webpack://free-design-system/./src/components/AI/VAI.vue","webpack://free-design-system/src/components/AI/VAI.vue","webpack://free-design-system/./src/components/AI/VAI.vue?9d8f","webpack://free-design-system/./src/components/AI/VAI.vue?367a","webpack://free-design-system/src/views/ai/AIView.vue","webpack://free-design-system/./src/views/ai/AIView.vue?f9e2","webpack://free-design-system/./src/views/ai/AIView.vue?14c6"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('v-ai',{attrs:{\"width\":350,\"height\":450,\"particles\":10}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('canvas',{ref:\"canvasAI\",style:(`width: ${_vm.width}px; height=${_vm.height}px; border: 1px solid #42a5f0`),attrs:{\"width\":_vm.width,\"height\":_vm.height},on:{\"click\":_vm.clickCell}}),_c('br'),_c('p',[_vm._v(\" Alive: \"+_vm._s(_vm.alive)+\" / Born: \"+_vm._s(_vm.born)+\" / Dead: \"+_vm._s(_vm.dead)+\" \"),(_vm.ratio)?_c('span',[_vm._v(\"/ Ratio: \"+_vm._s(_vm.ratio))]):_vm._e()]),_c('p',[_vm._v(\"Total collisions: \"+_vm._s(_vm.collisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy collisions: \"+_vm._s(_vm.heavyCollisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy percent: \"+_vm._s(_vm.heavyPercent))]),_c('p',[_vm._v(\"Most heavy: \"+_vm._s(_vm.mostHeavy.toFixed(3)))])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <canvas\n      ref=\"canvasAI\"\n      :width=\"width\"\n      :height=\"height\"\n      :style=\"`width: ${width}px; height=${height}px; border: 1px solid #42a5f0`\"\n      @click=\"clickCell\"\n    ></canvas>\n    <br />\n    <p>\n      Alive: {{ alive }} / Born: {{ born }} / Dead: {{ dead }}\n      <span v-if=\"ratio\">/ Ratio: {{ ratio }}</span>\n    </p>\n    <p>Total collisions: {{ collisions.toLocaleString() }}</p>\n    <p>Heavy collisions: {{ heavyCollisions.toLocaleString() }}</p>\n    <p>Heavy percent: {{ heavyPercent }}</p>\n    <p>Most heavy: {{ mostHeavy.toFixed(3) }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 100,\n    },\n    height: {\n      type: Number,\n      default: 100,\n    },\n    particles: {\n      type: Number,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      ctx: null,\n      cellWidth: this.width / 10,\n      cellHeight: this.height / 10,\n      radius: this.width / 20,\n      fps: 60,\n      timer: null,\n      cells: [],\n      collisions: 0,\n      heavyCollisions: 0,\n      mostHeavy: 0,\n      maxMass: 10,\n      newId: 0,\n      born: 0,\n      dead: 0,\n    };\n  },\n  methods: {\n    distance(x1, y1, x2, y2) {\n      const xDist = x2 - x1;\n      const yDist = y2 - y1;\n\n      return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n    },\n    rotate(velocity, angle) {\n      const rotatedVelocities = {\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),\n      };\n\n      return rotatedVelocities;\n    },\n    resolveCollision(particle, otherParticle) {\n      particle.peace = 1;\n      otherParticle.peace = 1;\n      this.collisions += 1;\n      const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n      const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n      const xDist = otherParticle.x - particle.x;\n      const yDist = otherParticle.y - particle.y;\n\n      // Prevent accidental overlap of particles\n      if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n        // Grab angle between the two colliding particles\n        const angle = -Math.atan2(\n          otherParticle.y - particle.y,\n          otherParticle.x - particle.x\n        );\n\n        // Store mass in var for better readability in collision equation\n        const m1 = particle.mass;\n        const m2 = otherParticle.mass;\n\n        // Velocity before equation\n        const u1 = this.rotate(particle.velocity, angle);\n        const u2 = this.rotate(otherParticle.velocity, angle);\n\n        // Velocity after 1d collision equation\n        const v1 = {\n          x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),\n          y: u1.y,\n        };\n        const v2 = {\n          x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),\n          y: u2.y,\n        };\n\n        // Final velocity after rotating axis back to original location\n        const vFinal1 = this.rotate(v1, -angle);\n        const vFinal2 = this.rotate(v2, -angle);\n\n        if (\n          otherParticle.mass < particle.mass &&\n          Math.sqrt(\n            Math.pow(otherParticle.velocity.x, 2) +\n              Math.pow(otherParticle.velocity.y, 2)\n          ) <\n            Math.sqrt(\n              Math.pow(particle.velocity.x, 2) +\n                Math.pow(particle.velocity.y, 2)\n            )\n        ) {\n          otherParticle.mass -=\n            otherParticle.mass > 0.03 ? otherParticle.mass / 10 : 0;\n          particle.mass +=\n            particle.mass < this.maxMass ? otherParticle.mass / 20 : 0;\n\n          if (vFinal2.x < 0) vFinal2.x -= (1 / otherParticle.mass) * 2;\n          if (vFinal2.x > 0) vFinal2.x += (1 / otherParticle.mass) * 2;\n          if (vFinal2.y < 0) vFinal2.y -= (1 / otherParticle.mass) * 2;\n          if (vFinal2.y > 0) vFinal2.y += (1 / otherParticle.mass) * 2;\n\n          this.heavyCollisions += 1;\n        } else if (\n          otherParticle.mass > particle.mass &&\n          Math.sqrt(\n            Math.pow(otherParticle.velocity.x, 2) +\n              Math.pow(otherParticle.velocity.y, 2)\n          ) >\n            Math.sqrt(\n              Math.pow(particle.velocity.x, 2) +\n                Math.pow(particle.velocity.y, 2)\n            )\n        ) {\n          particle.mass -= particle.mass > 0.03 ? particle.mass / 10 : 0;\n          otherParticle.mass +=\n            otherParticle.mass < this.maxMass ? particle.mass / 20 : 0;\n          if (vFinal1.x < 0) vFinal1.x -= (1 / particle.mass) * 2;\n          if (vFinal1.x > 0) vFinal1.x += (1 / particle.mass) * 2;\n          if (vFinal1.y < 0) vFinal1.y -= (1 / particle.mass) * 2;\n          if (vFinal1.y > 0) vFinal1.y += (1 / particle.mass) * 2;\n\n          this.heavyCollisions += 1;\n          this.mostHeavy = Math.max(\n            Math.round(otherParticle.mass * 10000) / 10000,\n            this.mostHeavy\n          );\n        } else {\n          particle.mass -= particle.mass > 0.03 ? 0.01 : 0;\n          otherParticle.mass += otherParticle.mass < 3 ? 0.002 : 0;\n          particle.color = particle.mass < 1 ? \"red\" : particle.color;\n          otherParticle.color =\n            otherParticle.mass < 1 ? \"red\" : otherParticle.color;\n        }\n\n        // Swap particle velocities for realistic bounce effect\n        particle.velocity.x = vFinal1.x;\n        particle.velocity.y = vFinal1.y;\n\n        otherParticle.velocity.x = vFinal2.x;\n        otherParticle.velocity.y = vFinal2.y;\n\n        const heaviest = Math.max(particle.mass, otherParticle.mass);\n        this.mostHeavy = Math.max(\n          Math.round(heaviest * 10000) / 10000,\n          this.mostHeavy\n        );\n      }\n    },\n    fill({ x, y, color, radius }) {\n      if (radius < 0) {\n        return;\n      }\n      this.ctx.fillStyle = color;\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius, 0, 2 * radius * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    },\n\n    clickCell($event) {\n      this.newId += 1;\n      this.born += 1;\n      const rect = this.$refs.canvasAI.getBoundingClientRect();\n      const canvasCoords = {\n        left: rect.left,\n        top: rect.top,\n      };\n      const mass = 1;\n      const radius = mass * 2;\n      const x = $event.x - canvasCoords.left;\n      const y = $event.y - canvasCoords.top;\n      const newCell = {\n        x,\n        y,\n        color: \"#888888\",\n        velocity: {\n          x: Math.random() * 10 - 5,\n          y: Math.random() * 10 - 5,\n        },\n        mass,\n        radius,\n        id: this.newId,\n        peace: 1,\n      };\n\n      if (x < radius || x >= this.width - radius) {\n        return false;\n      }\n      if (y < radius || y >= this.height - radius) {\n        return false;\n      }\n\n      this.fill(newCell);\n      this.cells.push(newCell);\n    },\n    render() {\n      clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        for (let i = 0; i < this.cells.length; i++) {\n          const cell = this.cells[i];\n          cell.peace += 1;\n\n          if (cell.mass >= 1) cell.color = \"#888888\";\n          if (cell.peace > 500 * cell.mass) {\n            cell.peace = 1;\n            const newX = cell.x;\n            const newY = cell.y;\n            const newVelocity = {\n              x: cell.velocity.x * -1 + Math.random(),\n              y: cell.velocity.y * -1 + Math.random(),\n            };\n            this.createNewCell(cell.mass, newVelocity, newX, newY);\n            this.born += 1;\n          }\n          for (let j = 0; j < this.cells.length; j++) {\n            const particleA = cell;\n            const particleB = this.cells[j];\n\n            if (particleA === particleB) {\n              continue;\n            }\n            if (\n              this.distance(\n                particleA.x,\n                particleA.y,\n                particleB.x,\n                particleB.y\n              ) <=\n              particleA.radius + particleB.radius\n            ) {\n              this.resolveCollision(particleA, particleB);\n\n              particleA.radius = particleA.mass * 2;\n              particleB.radius = particleB.mass * 2;\n            }\n          }\n        }\n\n        this.cells.forEach((cell) => {\n          const { x, y, velocity } = cell;\n          let newX = x + velocity.x;\n          let newY = y + velocity.y;\n\n          // hit left border\n          if (newX < cell.radius) {\n            newX = cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          //hit right border\n          if (newX >= this.width - cell.radius) {\n            newX = this.width - cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          // hit top border\n          if (newY < cell.radius) {\n            newY = cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          //hit bottom border\n          if (newY >= this.height - cell.radius) {\n            newY = this.height - cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          cell.x = newX;\n          cell.y = newY;\n          cell.velocity.x = cell.velocity.x > 3 ? 3 : cell.velocity.x;\n          cell.velocity.y = cell.velocity.y > 3 ? 3 : cell.velocity.y;\n\n          this.fill(cell);\n\n          if (cell.mass < 0.5) {\n            this.cells = this.cells.filter((item) => item !== cell);\n            this.dead += 1;\n          }\n\n          if (cell.mass > 5) {\n            cell.mass /= 2;\n            this.createNewCell(cell.mass);\n            this.born += 1;\n            this.mostHeavy = Math.max(...this.cells.map((o) => o.mass));\n          }\n        });\n\n        window.requestAnimationFrame(this.render);\n      }, 1000 / this.fps);\n    },\n    randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    createNewCell(mass, settedVelocity, settedX, settedY) {\n      this.newId += 1;\n\n      const peace = 1;\n\n      const radius = mass * 2;\n\n      const velocity = settedVelocity\n        ? settedVelocity\n        : {\n            x: Math.random() * 2 - 1,\n            y: Math.random() * 2 - 1,\n          };\n\n      const x = settedX\n        ? settedX\n        : this.randomIntFromInterval(\n            this.cellWidth,\n            this.width - this.cellWidth\n          );\n      const y = settedY\n        ? settedY\n        : this.randomIntFromInterval(\n            this.cellHeight,\n            this.height - this.cellHeight\n          );\n      const newCell = {\n        x,\n        y,\n        color: this.newId > this.particles ? \"green\" : \"#888888\",\n        velocity,\n        mass,\n        radius,\n        id: this.newId,\n        peace,\n      };\n\n      if (x < radius || x >= this.width - radius) {\n        return false;\n      }\n      if (y < radius || y >= this.height - radius) {\n        return false;\n      }\n\n      this.fill(newCell);\n      this.cells.push(newCell);\n    },\n    generateRandom(num) {\n      for (let i = 0; i < num; i++) {\n        this.createNewCell(2);\n      }\n    },\n  },\n  mounted() {\n    this.ctx = this.$refs.canvasAI.getContext(\"2d\");\n\n    this.generateRandom(this.particles);\n    this.render();\n  },\n  computed: {\n    alive() {\n      return this.cells.length;\n    },\n    heavyPercent() {\n      return Math.round((this.heavyCollisions / this.collisions) * 100) + \"%\";\n    },\n    ratio() {\n      if (this.dead > 0) {\n        return (this.born / this.dead).toFixed(4);\n      }\n      return null;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VAI.vue?vue&type=template&id=7cb077c9&scoped=true&\"\nimport script from \"./VAI.vue?vue&type=script&lang=js&\"\nexport * from \"./VAI.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7cb077c9\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div>\n    <v-ai :width=\"350\" :height=\"450\" :particles=\"10\" />\n  </div>\n</template>\n\n<script>\nimport VAi from \"@/components/AI/VAI\";\n\nexport default {\n  components: {\n    VAi,\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AIView.vue?vue&type=template&id=2513bf81&scoped=true&\"\nimport script from \"./AIView.vue?vue&type=script&lang=js&\"\nexport * from \"./AIView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2513bf81\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","ref","style","width","height","on","clickCell","_v","_s","alive","born","dead","ratio","_e","collisions","toLocaleString","heavyCollisions","heavyPercent","mostHeavy","toFixed","props","type","Number","default","particles","required","data","ctx","cellWidth","cellHeight","radius","fps","timer","cells","maxMass","newId","methods","distance","x1","y1","x2","y2","xDist","yDist","Math","sqrt","pow","rotate","velocity","angle","rotatedVelocities","x","cos","y","sin","resolveCollision","particle","otherParticle","peace","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","max","round","color","heaviest","fill","fillStyle","beginPath","arc","PI","closePath","$event","rect","$refs","canvasAI","getBoundingClientRect","canvasCoords","left","top","newCell","random","id","push","clearTimeout","setTimeout","fillRect","i","length","cell","newX","newY","newVelocity","createNewCell","j","particleA","particleB","forEach","filter","item","map","o","window","requestAnimationFrame","randomIntFromInterval","min","floor","settedVelocity","settedX","settedY","generateRandom","num","mounted","getContext","computed","component","components","VAi"],"sourceRoot":""}