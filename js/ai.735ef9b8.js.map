{"version":3,"file":"js/ai.735ef9b8.js","mappings":"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","sources":["webpack://free-design-system/./src/views/ai/AIView.vue","webpack://free-design-system/./src/components/AI/VAI.vue","webpack://free-design-system/src/components/AI/VAI.vue","webpack://free-design-system/./src/components/AI/VAI.vue?9d8f","webpack://free-design-system/./src/components/AI/VAI.vue?367a","webpack://free-design-system/src/views/ai/AIView.vue","webpack://free-design-system/./src/views/ai/AIView.vue?f9e2","webpack://free-design-system/./src/views/ai/AIView.vue?14c6"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('v-ai',{attrs:{\"width\":350,\"height\":550,\"particles\":300}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('canvas',{ref:\"canvasAI\",style:(`width: ${_vm.width}px; height=${_vm.height}px; border: 1px solid #42a5f0`),attrs:{\"width\":_vm.width,\"height\":_vm.height},on:{\"click\":_vm.clickCell}}),_c('br'),_c('p',[_vm._v(\"Alive: \"+_vm._s(_vm.alive))]),_c('p',[_vm._v(\"Total collisions: \"+_vm._s(_vm.collisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy collisions: \"+_vm._s(_vm.heavyCollisions.toLocaleString()))]),_c('p',[_vm._v(\"Heavy percent: \"+_vm._s(_vm.heavyPercent))]),_c('p',[_vm._v(\"Last heavy: \"+_vm._s(_vm.lastHeavy.toFixed(3)))])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <canvas\n      ref=\"canvasAI\"\n      :width=\"width\"\n      :height=\"height\"\n      :style=\"`width: ${width}px; height=${height}px; border: 1px solid #42a5f0`\"\n      @click=\"clickCell\"\n    ></canvas>\n    <br />\n    <p>Alive: {{ alive }}</p>\n    <p>Total collisions: {{ collisions.toLocaleString() }}</p>\n    <p>Heavy collisions: {{ heavyCollisions.toLocaleString() }}</p>\n    <p>Heavy percent: {{ heavyPercent }}</p>\n    <p>Last heavy: {{ lastHeavy.toFixed(3) }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 100,\n    },\n    height: {\n      type: Number,\n      default: 100,\n    },\n    particles: {\n      type: Number,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      ctx: null,\n      cellWidth: this.width / 10,\n      cellHeight: this.height / 10,\n      radius: this.width / 20,\n      fps: 60,\n      timer: null,\n      cells: [],\n      collisions: 0,\n      heavyCollisions: 0,\n      lastHeavy: 0,\n    };\n  },\n  methods: {\n    distance(x1, y1, x2, y2) {\n      const xDist = x2 - x1;\n      const yDist = y2 - y1;\n\n      return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n    },\n    rotate(velocity, angle) {\n      const rotatedVelocities = {\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),\n      };\n\n      return rotatedVelocities;\n    },\n    resolveCollision(particle, otherParticle) {\n      this.collisions += 1;\n      const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n      const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n      const xDist = otherParticle.x - particle.x;\n      const yDist = otherParticle.y - particle.y;\n\n      // Prevent accidental overlap of particles\n      if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n        // Grab angle between the two colliding particles\n        const angle = -Math.atan2(\n          otherParticle.y - particle.y,\n          otherParticle.x - particle.x\n        );\n\n        // Store mass in var for better readability in collision equation\n        const m1 = particle.mass;\n        const m2 = otherParticle.mass;\n\n        // Velocity before equation\n        const u1 = this.rotate(particle.velocity, angle);\n        const u2 = this.rotate(otherParticle.velocity, angle);\n\n        // Velocity after 1d collision equation\n        const v1 = {\n          x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),\n          y: u1.y,\n        };\n        const v2 = {\n          x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),\n          y: u2.y,\n        };\n\n        // Final velocity after rotating axis back to original location\n        const vFinal1 = this.rotate(v1, -angle);\n        const vFinal2 = this.rotate(v2, -angle);\n\n        // Swap particle velocities for realistic bounce effect\n        particle.velocity.x = vFinal1.x;\n        particle.velocity.y = vFinal1.y;\n\n        otherParticle.velocity.x = vFinal2.x;\n        otherParticle.velocity.y = vFinal2.y;\n        if (\n          otherParticle.mass < particle.mass &&\n          Math.abs(otherParticle.velocity.x) < Math.abs(particle.velocity.x) &&\n          Math.abs(otherParticle.velocity.y) < Math.abs(particle.velocity.y)\n        ) {\n          otherParticle.mass -= otherParticle.mass > 0.03 ? 0.01 : 0;\n          particle.mass += particle.mass < 5 ? 0.01 : 0;\n          particle.color = \"purple\";\n\n          this.heavyCollisions += 1;\n          this.lastHeavy = Math.round(particle.mass * 10000) / 10000;\n        } else {\n          particle.mass -= particle.mass > 0.03 ? 0.01 : 0;\n          otherParticle.mass += otherParticle.mass < 3 ? 0.002 : 0;\n          particle.color = particle.mass < 0.5 ? \"red\" : \"#888888\";\n          otherParticle.color = otherParticle.mass < 0.5 ? \"red\" : \"#888888\";\n        }\n      }\n    },\n    fill({ x, y, color, radius }) {\n      if (radius < 0) {\n        return;\n      }\n      this.ctx.fillStyle = color;\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius, 0, 2 * radius * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    },\n\n    clickCell($event) {\n      const rect = this.$refs.canvasAI.getBoundingClientRect();\n      const canvasCoords = {\n        left: rect.left,\n        top: rect.top,\n      };\n      const mass = 1;\n      const radius = mass * 2;\n      const x = $event.x - canvasCoords.left;\n      const y = $event.y - canvasCoords.top;\n      const newCell = {\n        x,\n        y,\n        color: \"#888888\",\n        velocity: {\n          x: Math.random() * 10 - 5,\n          y: Math.random() * 10 - 5,\n        },\n        mass,\n        radius,\n      };\n\n      if (x < radius || x >= this.width - radius) {\n        return false;\n      }\n      if (y < radius || y >= this.height - radius) {\n        return false;\n      }\n\n      this.fill(newCell);\n      this.cells.push(newCell);\n    },\n    render() {\n      this.timer = setTimeout(() => {\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        for (let i = 0; i < this.cells.length; i++) {\n          for (let j = 0; j < this.cells.length; j++) {\n            const particleA = this.cells[i];\n            const particleB = this.cells[j];\n\n            if (particleA === particleB) {\n              continue;\n            }\n            if (\n              this.distance(\n                particleA.x,\n                particleA.y,\n                particleB.x,\n                particleB.y\n              ) <=\n              particleA.radius + particleB.radius\n            ) {\n              this.resolveCollision(particleA, particleB);\n\n              particleA.radius = particleA.mass * 2;\n              particleB.radius = particleB.mass * 2;\n            }\n          }\n        }\n\n        this.cells.forEach((cell) => {\n          const { x, y, velocity } = cell;\n          let newX = x + velocity.x;\n          let newY = y + velocity.y;\n\n          // hit left border\n          if (newX < cell.radius) {\n            newX = cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          //hit right border\n          if (newX >= this.width - cell.radius) {\n            newX = this.width - cell.radius;\n            cell.velocity.x = -cell.velocity.x;\n          }\n\n          // hit top border\n          if (newY < cell.radius) {\n            newY = cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          //hit bottom border\n          if (newY >= this.height - cell.radius) {\n            newY = this.height - cell.radius;\n            cell.velocity.y = -cell.velocity.y;\n          }\n\n          cell.x = newX;\n          cell.y = newY;\n          cell.velocity.x = cell.velocity.x > 3 ? 3 : cell.velocity.x;\n          cell.velocity.y = cell.velocity.y > 3 ? 3 : cell.velocity.y;\n\n          this.fill(cell);\n\n          if (cell.mass < 0.3) {\n            console.log(cell.id);\n            this.cells = this.cells.filter((item) => item !== cell);\n          }\n        });\n\n        window.requestAnimationFrame(this.render);\n      }, 1000 / this.fps);\n    },\n    randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    },\n    generateRandom(num) {\n      for (let i = 0; i < num; i++) {\n        const mass = 1;\n        const radius = mass * 2;\n        const x = this.randomIntFromInterval(\n          this.cellWidth,\n          this.width - this.cellWidth\n        );\n        const y = this.randomIntFromInterval(\n          this.cellHeight,\n          this.height - this.cellHeight\n        );\n        const newCell = {\n          x,\n          y,\n          color: \"#888888\",\n          velocity: {\n            x: Math.random() * 10 - 5,\n            y: Math.random() * 10 - 5,\n          },\n          mass,\n          radius,\n          id: i,\n        };\n\n        if (x < radius || x >= this.width - radius) {\n          return false;\n        }\n        if (y < radius || y >= this.height - radius) {\n          return false;\n        }\n\n        this.fill(newCell);\n        this.cells.push(newCell);\n      }\n    },\n  },\n  mounted() {\n    this.ctx = this.$refs.canvasAI.getContext(\"2d\");\n\n    this.generateRandom(this.particles);\n    this.render();\n  },\n  computed: {\n    alive() {\n      return this.cells.length;\n    },\n    heavyPercent() {\n      return (\n        Math.round((this.heavyCollisions / this.collisions) * 100) / 100 + \"%\"\n      );\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./VAI.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VAI.vue?vue&type=template&id=3d664cad&scoped=true&\"\nimport script from \"./VAI.vue?vue&type=script&lang=js&\"\nexport * from \"./VAI.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3d664cad\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div>\n    <v-ai :width=\"350\" :height=\"550\" :particles=\"300\" />\n  </div>\n</template>\n\n<script>\nimport VAi from \"@/components/AI/VAI\";\n\nexport default {\n  components: {\n    VAi,\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AIView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AIView.vue?vue&type=template&id=38a07610&scoped=true&\"\nimport script from \"./AIView.vue?vue&type=script&lang=js&\"\nexport * from \"./AIView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"38a07610\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","ref","style","width","height","on","clickCell","_v","_s","alive","collisions","toLocaleString","heavyCollisions","heavyPercent","lastHeavy","toFixed","props","type","Number","default","particles","required","data","ctx","cellWidth","cellHeight","radius","fps","timer","cells","methods","distance","x1","y1","x2","y2","xDist","yDist","Math","sqrt","pow","rotate","velocity","angle","rotatedVelocities","x","cos","y","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","abs","color","round","fill","fillStyle","beginPath","arc","PI","closePath","$event","rect","$refs","canvasAI","getBoundingClientRect","canvasCoords","left","top","newCell","random","push","setTimeout","fillRect","i","length","j","particleA","particleB","forEach","cell","newX","newY","console","log","id","filter","item","window","requestAnimationFrame","randomIntFromInterval","min","max","floor","generateRandom","num","mounted","getContext","computed","component","components","VAi"],"sourceRoot":""}